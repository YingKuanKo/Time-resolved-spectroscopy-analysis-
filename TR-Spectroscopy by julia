# **Data processing - dT to dA**
#### Version 1.0.2
#### Programed by Ying Kaun Ko
#### Date: 2022.08.31
## Packages import

ENV["GKS_ENCODING"] = "utf-8"
import DelimitedFiles as dlm                        # DelimitedFiles is a pkg for read 
import PyPlot as plt
import DSP.Windows as dspw
using BenchmarkTools
using PlotlyJS
import Dates

# Get the calibrated wavelength
"""
    Get center wavelength from T spectrum
    The center wavelength is record in the file name of T spectrum ".... T@___ nm"
    Using the function "wavelength_calibrattion" as following,
    the calibrated wavelength array of measurment can be read.
    In the file "T_calibration/file name = Wavelength ref of multi ch lock in-96 ch.dat",
    the first column is the center wavelangth of corresponding raw.
"""

function wavelength_calibration(input_data::String = T_path)
    lambda0 = findnext(isequal('@'), input_data,1)
    ct_wavelength = String(T_path[lambda0+1:lambda0+3])
    Wave_dict =Dict("360"=>2, "380"=>3, "390"=>4, "400"=>5);
     output_data = T_calibration[2:end,Wave_dict[ct_wavelength]]; # 390 nm
    return output_data
end;

# Get the time array
"""
    Get Delay Time array
    The parameters of time array are record in dT_data "..../dT  t₀ dt pts.... ",
    which t₀ is initial time, dt is the time step of scan, pts is the total scan points, Note in the measurament program,
    the really scan points is pts+1 for 2 sides.
"""
function get_timearray(input_data::String = dT_path)
    dT_filename = split(input_data, "/")[end]
    t₀ = parse(Float64,split(dT_filename," ")[3])
    dt = parse(Float64,split(dT_filename," ")[4])
    pts = parse(Float64,split(dT_filename," ")[5])
    Time_array = collect(range(t₀, step = dt, length=Int(pts+1)));
    return t₀, dt, pts, Time_array
end;

# Data transpose
"""
    Transpose the data
    The function "transposedata transpose the 2d matrix"
    if "transpose" is true ==>transpose the input_data,false ==> keep the form.
    Note the following matrix form should be:
      
      Wavelength
    T
    i   Matrix
    m
    e
"""
function transposedata(input_data::Matrix, tp::Bool = false)
    if tp == false
        output_data = input_data
    elseif tp == true
        output_data = transpose(input_data)
    else
        output_data = println("error")
    end
    return output_data
end;

# Get dT/T
"""
    Get the dT/T result
"""
function dTT_Transfer(dT_input::Matrix, T_input)
    m, n = size(dT_input,1), size(dT_input,2)
    dTT = similar(dT_input)
    for i in 1:m
        for j in 1:n
        dTT[i,j] = dT_input[i,j]/T_input[j]
        end
    end
    return dTT
end;

# Data reverse
"""
    r == false ? Y/N Ｙ: output_data = input_data
                      N: rev == true ? Y/N  Y: output_data = reverse(input_data,dims=1)
                                            N: print("error")
"""
function reverse_data(input_data, rev = false)
    output_data = (rev == false ? input_data :
                                rev == true ? reverse(input_data,dims=1) : print("error"))
end;

# Remove background noise
"""
    Remove the baakground noise,
    taking the average of first few lines in input_data to be background,
"""
function remove_bg(input_data, start_pt, avg_number)
    m,n = size(input_data,1),size(input_data,2)
    bg_array = input_data[start_pt:start_pt+avg_number-1,:]
    bg_avg = sum(bg_array,dims=1)/avg_number
    output_data = similar(input_data)
    @simd for i in 1:m
        @inbounds output_data[i,1:end] = input_data[i,1:end]-bg_avg[1:end]
    end
    return (bg_array,bg_avg,output_data)
end;

# dTT to dA
"""
    Transfer dT/T to dA
    The input_data should be dTT matirx
"""
function dA_Transfer(input_data)
    m, n = size(input_data,1), size(input_data,2)
    dA = similar(input_data)
    for i in 1:m
        for j in 1:n
        dA[i,j] = input_data[i,j] >= -1 ?  -log10(1+input_data[i,j]) : break
        end
    end
    return dA
end;

# Add wavelength and delay time
"""
    After transfer dT to dA, add the wavelength and delay time imformation
"""
function get_dA_spectrum(input_data1=dA, input_data2=Calibrated_wavelength, input_data3=Time_array)
    dA_seted = Matrix(undef, size(dA)[1]+1,size(dA)[2]+1)
    dA_seted[1,1] = 0
    dA_seted[2:end,1] = Time_array
    dA_seted[1,2:end] = Calibrated_wavelength
    dA_seted[2:end,2:end] = dA
    return dA_seted
end;

# Save dA
"""
    Save the dA spectrum
"""
function save_dA()
    Transfer_imofrmation = string("Transfer imformation of dT to dA", "\n",
                                "  Save time: ", Dates.now(), "\n",
                                "  Start scaning time: ",init_time, " fs\n",
                                "  Time step: ", time_step, " fs\n",
                                "  Step number: ", step_nums+1," \n",
                                "  Scan Wavelength: from ", Calibrated_wavelength[1], " to ", Calibrated_wavelength[end]," nm\n",
                                );
    dA_savepath = replace(dT_path, "dT" => "dA")
    dAim_savepath = replace(dT_path, "dT" => "dA imformation")

    dA_save = dlm.writedlm(dA_savepath, dA_spectrum)
    dAim_save = write(dAim_savepath, Transfer_imofrmation)
    println("dA and dA imformation saved in\n", dA_savepath, " and\n", dAim_savepath)
    return
end;
